{"version":3,"sources":["components/SelectServer/index.tsx","components/Checkbox/index.tsx","utils/object.ts","config/raidTitles.ts","config/index.ts","utils/images.ts","components/Case/index.tsx","utils/openGithub.ts","components/GithubInfos/index.tsx","components/Dialog/Dialog.tsx","components/Dialog/DialogTitle.tsx","components/Dialog/DialogActions.tsx","components/Dialog/ListItem.tsx","components/ModalAddKill/index.tsx","components/ModalNoGuild/index.tsx","components/Raids/index.tsx","components/Menu/icons.tsx","components/ModalCreateServer/index.tsx","components/ModalCreateGuild/index.tsx","components/ModalAddKillInfo/index.tsx","components/ModalHelp/index.tsx","components/AppVersion/index.tsx","components/Menu/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx","utils/string.ts","components/Raids/styles.module.scss","components/Case/styles.module.scss","components/Dialog/styles.module.scss"],"names":["ServerSelect","onChange","servers","selected","FormControl","style","width","InputLabel","htmlFor","Select","value","event","target","inputProps","name","id","map","server","MenuItem","key","Checkbox","label","isChecked","FormControlLabel","control","checked","color","getBoolObjectAsArray","anyBooleanObject","Object","keys","reduce","prev","next","push","deepClone","obj","JSON","parse","stringify","cleanRaidTitles","wb","drakes","mc","ony","bwl","zg","aq20","aq40","naxx","CONFIG","appVersion","appPath","process","skin","baseUrl","killAlliance","killHorde","nokill","fkill","fkillHorde","fkillAlliance","helpImage","helpAddKillImage","Case","date","isFirst","isServerFirst","faction","onClick","imgSrc","cursorStyle","cursor","className","styles","src","alt","title","Image","openGithub","serverName","filePath","fileContent","url","encodeURIComponent","window","open","GithubInfos","DialogContentText","marginBottom","marginTop","fontWeight","href","Dialog","children","props","fullWidth","noValidate","autoComplete","DialogTitle","borderBottom","DialogActions","onClose","disabled","borderTop","Button","variant","ListItem","formListItem","required","ModalAddKill","stringDate","isOpen","serverInfos","guildName","raidName","bossName","React","useState","Date","setDate","toISOString","replace","error","DialogContent","List","TextField","MuiPickersUtilsProvider","utils","DateFnsUtils","margin","format","KeyboardButtonProps","guilds","raids","ModalNoGuild","setOpen","hasNoDown","g","bool","nextRaid","bool2","nextBoss","Boolean","Raids","currentServer","currentServerName","displayedGuilds","displayedRaids","showEmptyGuilds","isModalOpen","setModalOpen","currentGuildName","setCurrentGuildName","currentRaidName","setCurrentRaidName","currentBossName","setCurrentBossName","unsortedRawGuilds","stack","sortedGuilds","unsortedGuilds","sort","a","b","raidKeys","reverse","i","length","raidA","raidB","bossKeys","j","currentBossA","currentBossB","sortGuilds","filter","reversedDisplayedRaids","bosses","foundFirsts","horde","alliance","raidBlock","bossLine","textDecoration","bossValue","infos","isFirstServer","isFirstFaction","includes","cleanName","x","guildNames","Icon","draw","fill","height","viewBox","d","HelpIcon","MenuIcon","padding","marginRight","CloseMenuIcon","AddGuild","BugIcon","CoinIcon","GridPlus","AddServer","ModalCreateServer","setServerName","serverType","setServerType","serverLang","setServerLang","lang","type","marginLeft","Radio","ModalCreateGuild","setGuildName","guildFaction","setGuildFaction","guildGMName","setGuildGMName","guildDiscord","setGuildDiscord","guildSite","setGuildSite","gm","discord","site","guildRef","FormLabel","component","ModalAddKillInfo","textAlign","paddingRight","ModalHelp","maxWidth","AppVersion","position","bottom","ListItemText","primary","Menu","isModalInfoKillVisible","setModalInfoKillVisibility","isModalHelpVisible","setModalHelpVisibility","isModalCreateServerVisible","setModalCreateServerVisibility","isModalCreateGuildVisible","setModalCreateGuildVisibility","display","top","left","Drawer","zIndex","button","ListItemIcon","Divider","typedDatabase","rawDB","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","basename","path","exact","history","params","showRaidDrawer","setRaidDrawerVisibility","setCurrentServerName","setEmptyGuildsVisibility","currentDisplayedFactions","setFactionDisplayed","currentDisplayedRaids","setRaidDisplayed","guildsNames","right","factionName","alignItems","s","charAt","toUpperCase","slice","newValue","newServer","anchor","justifyContent","flexWrap","paddingLeft","whiteSpace","newState","hash","to","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.11d0c2da.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\ninterface Props {\n  onChange: (newValue: string) => void;\n  servers: string[];\n  selected: string;\n}\n\nexport default function ServerSelect({\n  onChange = () => {},\n  servers = [],\n  selected\n}: Props) {\n  return (\n    <FormControl style={{ width: 400 }}>\n      <InputLabel htmlFor=\"server-simple\">Server</InputLabel>\n      <Select\n        value={selected}\n        onChange={(event: ChangeEvent<any>) => onChange(event.target.value)}\n        inputProps={{\n          name: 'server',\n          id: 'server-simple'\n        }}\n      >\n        {servers.map(server => (\n          <MenuItem key={server} value={server}>\n            {server}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport { DisplayedRaids, DisplayedFactions } from '../../types/states.type';\nimport {\n  Checkbox as MaterialCheckbox,\n  FormControlLabel\n} from '@material-ui/core';\nimport { RaidNames, Faction } from '../../types/database.type';\n\ninterface Props {\n  name: RaidNames | Faction;\n  label: string | React.ReactNode;\n  isChecked: boolean;\n  onChange: (newValue: Partial<DisplayedRaids | DisplayedFactions>) => void;\n}\n\nexport function Checkbox({ name, label, isChecked, onChange }: Props) {\n  return (\n    <FormControlLabel\n      control={\n        <MaterialCheckbox\n          checked={isChecked}\n          onChange={() => onChange({ [name]: !isChecked })}\n          color=\"primary\"\n        />\n      }\n      label={label}\n    />\n  );\n}\n","export function getBoolObjectAsArray<T>(anyBooleanObject: {\n  [x: string]: boolean;\n}): T[] {\n  return (Object.keys(anyBooleanObject) as any[]).reduce(\n    (prev: any[], next: any) => {\n      if (anyBooleanObject[next]) {\n        prev.push(next);\n      }\n      return prev;\n    },\n    []\n  );\n}\n\nexport function deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj));\n}\n","import { RaidNames } from '../types/database.type';\n\nexport const cleanRaidTitles: { [raidName in RaidNames]: string } = {\n  wb: 'World Bosses',\n  drakes: 'Emerald Dragons',\n  mc: 'Molten Core',\n  ony: \"Onyxia's Lair\",\n  bwl: 'Blackwing Lair',\n  zg: \"Zul'Gurub\",\n  aq20: \"Ahn'Qiraj Ruins\",\n  aq40: \"Ahn'Qiraj Temple\",\n  naxx: 'Naxxramas'\n};\n","const CONFIG = {\n  appVersion: 'v1.0.0-beta',\n  appPath: process.env.PUBLIC_URL || '',\n  skin: 'default'\n};\n\nexport default CONFIG;\n","import CONFIG from '../config';\n\nexport const baseUrl = `${CONFIG.appPath}/img/skin/${CONFIG.skin}`;\nexport const killAlliance = `${baseUrl}/killAlliance.gif`;\nexport const killHorde = `${baseUrl}/killHorde.gif`;\nexport const nokill = `${baseUrl}/nokill.gif`;\nexport const fkill = `${baseUrl}/fkill.gif`;\nexport const fkillHorde = `${baseUrl}/fkillHorde.gif`;\nexport const fkillAlliance = `${baseUrl}/fkillAlliance.gif`;\n\nexport const helpImage = `${CONFIG.appPath}/img/help.gif`;\n\nexport const helpAddKillImage = `${CONFIG.appPath}/img/help-add-kill.png`;\n\nnew Image().src = baseUrl;\nnew Image().src = killAlliance;\nnew Image().src = killHorde;\nnew Image().src = nokill;\nnew Image().src = fkill;\nnew Image().src = fkillHorde;\nnew Image().src = fkillAlliance;\nnew Image().src = helpImage;\nnew Image().src = helpAddKillImage;\n","import React from 'react';\nimport { Faction } from '../../types/database.type';\nimport styles from './styles.module.scss';\nimport {\n  killHorde,\n  killAlliance,\n  nokill,\n  fkill,\n  fkillHorde,\n  fkillAlliance\n} from '../../utils/images';\n\ninterface Props {\n  isFirst?: boolean;\n  isServerFirst?: boolean;\n  date?: string;\n  faction?: Faction;\n  onClick: () => void;\n}\n\nexport function Case({\n  date,\n  isFirst,\n  isServerFirst,\n  faction,\n  onClick\n}: Props) {\n  let imgSrc = faction === 'horde' ? killHorde : killAlliance;\n  if (!date) {\n    imgSrc = nokill;\n  } else {\n    if (isServerFirst) {\n      imgSrc = fkill;\n    } else if (isFirst) {\n      imgSrc = faction === 'horde' ? fkillHorde : fkillAlliance;\n    }\n  }\n  const cursorStyle = imgSrc === nokill ? { cursor: 'pointer' } : {};\n\n  return (\n    <div className={styles.Case} style={cursorStyle} onClick={onClick}>\n      <img src={imgSrc} alt={date} title={date} />\n    </div>\n  );\n}\n","export function openGithub(\n  serverName: string,\n  filePath: string,\n  fileContent: object\n) {\n  const baseUrl =\n    'https://github.com/DavidBabel/wow-classic-pve/new/master/?filename=servers/';\n  function getContent(obj: any) {\n    return '&value=' + encodeURIComponent(JSON.stringify(obj, null, 2));\n  }\n  let url = `${baseUrl}${serverName}/${filePath}${getContent(fileContent)}`;\n\n  window.open(url, '_blank');\n}\n","import React from 'react';\nimport { DialogContentText } from '@material-ui/core';\n\nexport function GithubInfos() {\n  return (\n    <DialogContentText>\n      <h5 style={{ marginBottom: 8, marginTop: 4, color: '#d0d0d0' }}>\n        First you need to have a{' '}\n        <a\n          style={{ color: '#c0c0c0', fontWeight: 'bold' }}\n          href=\"https://github.com/\"\n          target=\"_href\"\n        >\n          GitHub account\n        </a>{' '}\n        (it's free).\n      </h5>\n    </DialogContentText>\n  );\n}\n","import React from 'react';\nimport MaterialDialog, { DialogProps } from '@material-ui/core/Dialog';\n\nexport function Dialog({ children, ...props }: DialogProps) {\n  return (\n    <MaterialDialog fullWidth={true} {...props}>\n      <form noValidate autoComplete=\"off\">\n        {children}\n      </form>\n    </MaterialDialog>\n  );\n}\n","import React from 'react';\nimport MaterialDialogTitle, {\n  DialogTitleProps\n} from '@material-ui/core/DialogTitle';\n\nexport function DialogTitle({ children, ...props }: DialogTitleProps) {\n  return (\n    <MaterialDialogTitle\n      style={{ borderBottom: '1px solid #e0e0e0' }}\n      {...props}\n    >\n      {children}\n    </MaterialDialogTitle>\n  );\n}\n","import React from 'react';\nimport MaterialDialogActions, {\n  DialogActionsProps\n} from '@material-ui/core/DialogActions';\nimport { Button } from '@material-ui/core';\n\ninterface Props extends DialogActionsProps {\n  onClose?: () => void;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nexport function DialogActions({\n  onClose,\n  onClick,\n  disabled = false,\n  children,\n  ...props\n}: Props) {\n  return (\n    <MaterialDialogActions\n      style={{ borderTop: '1px solid #e0e0e0', marginTop: 10 }}\n      {...props}\n    >\n      {onClose && (\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n        </Button>\n      )}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </Button>\n    </MaterialDialogActions>\n  );\n}\n","import React from 'react';\nimport MaterialListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport styles from './styles.module.scss';\n\nexport function ListItem(props: ListItemProps & any) {\n  return <MaterialListItem className={styles.formListItem} {...props} />;\n}\n","import React from 'react';\nimport 'date-fns';\nimport {\n  TextField,\n  DialogContent,\n  DialogContentText,\n  List\n} from '@material-ui/core';\nimport { Server, RaidNames } from '../../types/database.type';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker\n} from '@material-ui/pickers';\nimport { openGithub } from '../../utils/openGithub';\nimport { deepClone } from '../../utils/object';\nimport { GithubInfos } from '../GithubInfos';\n\nimport { Dialog, DialogActions, DialogTitle, ListItem } from '../Dialog';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  serverInfos: Server;\n  serverName: string;\n  guildName: string;\n  raidName: RaidNames;\n  bossName: string;\n}\n\nconst required = <span style={{ color: 'red', fontWeight: 'bold' }}>*</span>;\n\nexport function ModalAddKill({\n  isOpen,\n  onClose,\n  serverInfos,\n  serverName,\n  guildName,\n  raidName,\n  bossName\n}: Props) {\n  const [date, setDate] = React.useState(new Date());\n\n  let stringDate: string;\n  try {\n    stringDate = date.toISOString().replace(/:[0-9]{2}.[0-9]{3}Z/, '');\n  } catch (error) {\n    stringDate = '';\n  }\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Add a boss kill {required}</DialogTitle>\n      <DialogContent>\n        <GithubInfos />\n        <List>\n          <ListItem>\n            <TextField label=\"Server\" value={serverName} disabled />\n            <TextField label=\"Guild name\" value={guildName} disabled />\n            <TextField label=\"Boss name\" value={bossName} disabled />\n          </ListItem>\n\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <ListItem>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                label=\"Date of kill\"\n                format=\"yyyy/MM/dd\"\n                value={date}\n                onChange={(date: any) => date && setDate(date)}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date'\n                }}\n              />\n              <KeyboardTimePicker\n                margin=\"normal\"\n                label=\"~ Time of kill (in your timezone)\"\n                value={date}\n                onChange={(date: any) => date && setDate(date)}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time'\n                }}\n              />\n            </ListItem>\n          </MuiPickersUtilsProvider>\n          <ListItem>\n            <TextField\n              label=\"UTC Date Preview\"\n              value={stringDate}\n              disabled\n              margin=\"normal\"\n            />\n          </ListItem>\n        </List>\n        <DialogContentText>\n          <p>{required} Note that you will need to provide proof</p>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions\n        disabled={!stringDate}\n        onClose={onClose}\n        onClick={() => {\n          // TODO fix this type\n          const fileContent = deepClone<any>(serverInfos.guilds[guildName]);\n          fileContent.raids[raidName][bossName] = stringDate;\n          openGithub(serverName, guildName + '.json', fileContent);\n        }}\n      >\n        Make a request to add my boss kill\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { Dialog, DialogTitle, DialogActions } from '../Dialog';\nimport { DialogContent } from '@material-ui/core';\n\nexport function ModalNoGuild() {\n  const [isOpen, setOpen] = React.useState(true);\n  const onClose = () => setOpen(false);\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>No guild found</DialogTitle>\n      <DialogContent>\n        <p>\n          Please create your first guild for this server, open the menu to do\n          so.\n        </p>\n      </DialogContent>\n      <DialogActions onClick={onClose}>Ok</DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { RaidNames, Server, Guild } from '../../types/database.type';\nimport { Case } from '../Case/index';\nimport styles from './styles.module.scss';\nimport { ModalAddKill } from '../ModalAddKill';\nimport { deepClone } from '../../utils/object';\nimport { ModalNoGuild } from '../ModalNoGuild';\n\nfunction sortGuilds(unsortedGuilds: Guild[]) {\n  return unsortedGuilds.sort((a: any, b: any) => {\n    const raidKeys = Object.keys(a.raids).reverse();\n\n    for (let i = 0; i < raidKeys.length; i++) {\n      const raidA = a.raids[raidKeys[i]];\n      const raidB = b.raids[raidKeys[i]];\n      const bossKeys = Object.keys(raidA).reverse();\n      for (let j = 0; j < bossKeys.length; j++) {\n        const currentBossA = raidA[bossKeys[j]] || '9999-99-99';\n        const currentBossB = raidB[bossKeys[j]] || '9999-99-99';\n\n        if (currentBossA > currentBossB) {\n          return 1;\n        }\n        if (currentBossA < currentBossB) {\n          return -1;\n        }\n      }\n    }\n    return 0;\n  });\n}\n\nfunction hasNoDown(g: Guild) {\n  return Object.keys(g.raids).reduce(\n    (bool: boolean, nextRaid: any) =>\n      bool ||\n      Object.keys((g.raids as any)[nextRaid]).reduce(\n        (bool2: boolean, nextBoss: string) =>\n          bool2 || Boolean((g.raids as any)[nextRaid][nextBoss]),\n        false\n      ),\n    false\n  );\n}\n\ninterface Props {\n  showEmptyGuilds: boolean;\n  currentServer: Server;\n  currentServerName: string;\n  displayedGuilds: string[];\n  displayedRaids: RaidNames[];\n}\n\nexport function Raids({\n  currentServer,\n  currentServerName,\n  displayedGuilds,\n  displayedRaids,\n  showEmptyGuilds\n}: Props) {\n  const [isModalOpen, setModalOpen] = React.useState(false);\n  const [currentGuildName, setCurrentGuildName] = React.useState('');\n  const [currentRaidName, setCurrentRaidName] = React.useState<RaidNames>();\n  const [currentBossName, setCurrentBossName] = React.useState('');\n\n  const unsortedRawGuilds: Guild[] = Object.keys(currentServer.guilds).reduce(\n    (stack: Guild[], next: string) => {\n      stack.push(currentServer.guilds[next]);\n      return stack;\n    },\n    []\n  );\n  const unsortedGuilds = showEmptyGuilds\n    ? unsortedRawGuilds\n    : unsortedRawGuilds.filter(hasNoDown);\n  const sortedGuilds = sortGuilds(unsortedGuilds);\n\n  if (!sortedGuilds[0]) {\n    return <ModalNoGuild />;\n  }\n  const reversedDisplayedRaids = deepClone(displayedRaids).reverse();\n  return (\n    <div className={styles.Raids}>\n      {reversedDisplayedRaids.map((raidName: RaidNames) => {\n        const bosses = Object.keys(sortedGuilds[0].raids[raidName]);\n        const foundFirsts = bosses.reduce((stack: any, next) => {\n          stack[next] = {\n            horde: false,\n            alliance: false\n          };\n          return stack;\n        }, {});\n\n        return (\n          <div className={styles.raidBlock}>\n            {bosses.reverse().map((b: string) => (\n              <div className={styles.bossLine}>\n                <div className={styles.bossName}>\n                  <a\n                    style={{\n                      textDecoration: 'none',\n                      color: 'black',\n                      fontWeight: 'bold'\n                    }}\n                    href={`https://classic.wowhead.com/search?q=${b}`}\n                    target=\"_href\"\n                  >\n                    {b}\n                  </a>\n                </div>\n                {sortedGuilds\n                  .map(g => {\n                    const bossValue = (g.raids[raidName] as any)[b];\n                    const faction = g.infos.faction;\n                    const isFirstServer =\n                      bossValue &&\n                      foundFirsts[b].horde === false &&\n                      foundFirsts[b].alliance === false;\n                    const isFirstFaction =\n                      bossValue && foundFirsts[b][faction] === false;\n                    if (isFirstServer) {\n                      foundFirsts[b][faction] = true;\n                    } else if (isFirstFaction) {\n                      foundFirsts[b][faction] = true;\n                    }\n                    if (!displayedGuilds.includes(g.infos.cleanName)) {\n                      return null;\n                    }\n                    return (\n                      <Case\n                        faction={g.infos.faction}\n                        date={bossValue}\n                        isFirst={isFirstFaction}\n                        isServerFirst={isFirstServer}\n                        onClick={() => {\n                          if (bossValue) return;\n                          setCurrentGuildName(g.infos.cleanName);\n                          setCurrentRaidName(raidName);\n                          setCurrentBossName(b);\n                          setModalOpen(true);\n                        }}\n                      />\n                    );\n                  })\n                  .filter(x => x)}\n              </div>\n            ))}\n          </div>\n        );\n      })}\n      <div className={styles.guildNames}>\n        {sortedGuilds\n          .filter(g => displayedGuilds.includes(g.infos.cleanName))\n          .map(g => (\n            <div>{g.infos.cleanName}</div>\n          ))}\n      </div>\n      <ModalAddKill\n        serverInfos={currentServer}\n        serverName={currentServerName}\n        guildName={currentGuildName}\n        raidName={currentRaidName!}\n        bossName={currentBossName}\n        isOpen={isModalOpen}\n        onClose={() => setModalOpen(false)}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\n// svg from https://materialdesignicons.com/\n\ninterface Props {\n  draw: string;\n  fill?: string;\n}\nconst Icon = ({ draw, fill = '#000000' }: Props) => (\n  <svg style={{ width: 24, height: 24 }} viewBox=\"0 0 24 24\">\n    <path fill={fill} d={draw} />\n  </svg>\n);\n\nexport const HelpIcon = () => (\n  <Icon draw=\"M11,18H13V16H11V18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,6A4,4 0 0,0 8,10H10A2,2 0 0,1 12,8A2,2 0 0,1 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10A4,4 0 0,0 12,6Z\" />\n);\nexport const MenuIcon = ({ onClick }: { onClick: () => void }) => (\n  <div\n    onClick={onClick}\n    style={{\n      width: 50,\n      height: 50,\n      padding: 14,\n      marginRight: 20,\n      cursor: 'pointer'\n      // borderRadius: 5,\n      // border: '1px color gray'\n    }}\n  >\n    <Icon draw=\"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\" />\n  </div>\n);\nexport const CloseMenuIcon = ({ onClick }: { onClick: () => void }) => (\n  <div\n    onClick={onClick}\n    style={{\n      width: 50,\n      height: 50,\n      padding: 14,\n      marginRight: 20,\n      cursor: 'pointer'\n      // borderRadius: 5,\n      // border: '1px color gray'\n    }}\n  >\n    <Icon draw=\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\" />\n  </div>\n);\nexport const AddGuild = () => (\n  <Icon draw=\"M13,12A3.5,3.5 0 0,0 16.5,8.5A3.5,3.5 0 0,0 13,5A3.5,3.5 0 0,0 9.5,8.5A3.5,3.5 0 0,0 13,12M13,7A1.5,1.5 0 0,1 14.5,8.5A1.5,1.5 0 0,1 13,10A1.5,1.5 0 0,1 11.5,8.5A1.5,1.5 0 0,1 13,7M17.26,11.97C18.04,11.03 18.5,9.82 18.5,8.5C18.5,7.18 18.04,5.97 17.26,5.03C17.34,5 17.42,5 17.5,5A3.5,3.5 0 0,1 21,8.5A3.5,3.5 0 0,1 17.5,12C17.42,12 17.34,12 17.26,11.97M5,13V16H3V13H0V11H3V8H5V11H8V13M24,17.25V19H20.96V17.25C20.96,15.77 20.16,14.65 19,13.81C21.46,14.08 24,15.23 24,17.25M13,13.75C10.66,13.75 7,14.92 7,17.25V19H19V17.25C19,14.92 15.34,13.75 13,13.75M9.34,17C10.18,16.42 11.21,15.75 13,15.75C14.79,15.75 15.82,16.42 16.66,17\" />\n);\nexport const AddGuildDark = () => (\n  <Icon draw=\"M13,13C11,13 7,14 7,16V18H19V16C19,14 15,13 13,13M19.62,13.16C20.45,13.88 21,14.82 21,16V18H24V16C24,14.46 21.63,13.5 19.62,13.16M13,11A3,3 0 0,0 16,8A3,3 0 0,0 13,5A3,3 0 0,0 10,8A3,3 0 0,0 13,11M18,11A3,3 0 0,0 21,8A3,3 0 0,0 18,5C17.68,5 17.37,5.05 17.08,5.14C17.65,5.95 18,6.94 18,8C18,9.06 17.65,10.04 17.08,10.85C17.37,10.95 17.68,11 18,11M8,10H5V7H3V10H0V12H3V15H5V12H8V10Z\" />\n);\n\nexport const PlusSymbol = () => (\n  <Icon draw=\"M4,9H9V4H15V9H20V15H15V20H9V15H4V9M11,13V18H13V13H18V11H13V6H11V11H6V13H11Z\" />\n);\nexport const BugIcon = () => (\n  <Icon draw=\"M20,8H17.19C16.74,7.2 16.12,6.5 15.37,6L17,4.41L15.59,3L13.42,5.17C12.96,5.06 12.5,5 12,5C11.5,5 11.05,5.06 10.59,5.17L8.41,3L7,4.41L8.62,6C7.87,6.5 7.26,7.21 6.81,8H4V10H6.09C6.03,10.33 6,10.66 6,11V12H4V14H6V15C6,15.34 6.03,15.67 6.09,16H4V18H6.81C8.47,20.87 12.14,21.84 15,20.18C15.91,19.66 16.67,18.9 17.19,18H20V16H17.91C17.97,15.67 18,15.34 18,15V14H20V12H18V11C18,10.66 17.97,10.33 17.91,10H20V8M16,15A4,4 0 0,1 12,19A4,4 0 0,1 8,15V11A4,4 0 0,1 12,7A4,4 0 0,1 16,11V15M14,10V12H10V10H14M10,14H14V16H10V14Z\" />\n);\nexport const CoinIcon = () => (\n  <Icon draw=\"M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4M11,17V16H9V14H13V13H10A1,1 0 0,1 9,12V9A1,1 0 0,1 10,8H11V7H13V8H15V10H11V11H14A1,1 0 0,1 15,12V15A1,1 0 0,1 14,16H13V17H11Z\" />\n);\nexport const BitcoinIcon = () => (\n  <Icon draw=\"M4.5,5H8V2H10V5H11.5V2H13.5V5C19,5 19,11 16,11.25C20,11 21,19 13.5,19V22H11.5V19H10V22H8V19H4.5L5,17H6A1,1 0 0,0 7,16V8A1,1 0 0,0 6,7H4.5V5M10,7V11C10,11 14.5,11.25 14.5,9C14.5,6.75 10,7 10,7M10,12.5V17C10,17 15.5,17 15.5,14.75C15.5,12.5 10,12.5 10,12.5Z\" />\n);\n\nexport const GridPlus = () => (\n  <Icon draw=\"M13 3V11H21V3H13M3 21H11V13H3V21M3 3V11H11V3H3M13 16H16V13H18V16H21V18H18V21H16V18H13V16Z\" />\n);\n\nexport const TabPlus = () => (\n  <Icon draw=\"M11,2A2,2 0 0,1 13,4V20A2,2 0 0,1 11,22H2V2H11M4,10V14H11V10H4M4,16V20H11V16H4M4,4V8H11V4H4M15,11H18V8H20V11H23V13H20V16H18V13H15V11Z\" />\n);\nexport const BookmarkPlus = () => (\n  <Icon draw=\"M17,18V5H7V18L12,15.82L17,18M17,3A2,2 0 0,1 19,5V21L12,18L5,21V5C5,3.89 5.9,3 7,3H17M11,7H13V9H15V11H13V13H11V11H9V9H11V7Z\" />\n);\nexport const BookmarkPlusDark = () => (\n  <Icon draw=\"M17,3A2,2 0 0,1 19,5V21L12,18L5,21V5C5,3.89 5.9,3 7,3H17M11,7V9H9V11H11V13H13V11H15V9H13V7H11Z\" />\n);\nexport const AddServer = () => (\n  <Icon draw=\"M18,14H20V17H23V19H20V22H18V19H15V17H18V14M12,3C16.42,3 20,4.79 20,7C20,9.21 16.42,11 12,11C7.58,11 4,9.21 4,7C4,4.79 7.58,3 12,3M4,9C4,11.21 7.58,13 12,13C16.42,13 20,11.21 20,9V9L20,12.08L19,12C16.41,12 14.2,13.64 13.36,15.94L12,16C7.58,16 4,14.21 4,12V9M4,14C4,16.21 7.58,18 12,18H13C13,19.05 13.27,20.04 13.75,20.9L12,21C7.58,21 4,19.21 4,17V14Z\" />\n);\n","import React, { ChangeEvent } from 'react';\nimport {\n  Radio,\n  TextField,\n  DialogContent,\n  FormControlLabel,\n  Select,\n  FormControl,\n  InputLabel,\n  List,\n  MenuItem\n} from '@material-ui/core';\nimport { openGithub } from '../../utils/openGithub';\nimport { GithubInfos } from '../GithubInfos';\nimport { Dialog, DialogActions, DialogTitle, ListItem } from '../Dialog';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ModalCreateServer({ isOpen, onClose }: Props) {\n  const [serverName, setServerName] = React.useState<string>();\n  const [serverType, setServerType] = React.useState<string>();\n  const [serverLang, setServerLang] = React.useState<string>();\n\n  const fileContent = {\n    lang: serverLang,\n    type: serverType\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Add your server</DialogTitle>\n      <DialogContent>\n        <GithubInfos />\n        <List>\n          <ListItem>\n            <TextField\n              label=\"Server name\"\n              value={serverName}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                setServerName(event.target.value)\n              }\n              margin=\"normal\"\n            />\n\n            <FormControlLabel\n              style={{ marginLeft: 20 }}\n              control={\n                <Radio\n                  checked={serverType === 'pve'}\n                  onClick={() => setServerType('pve')}\n                  value=\"pve\"\n                  name=\"radio-button-server-type\"\n                  inputProps={{ 'aria-label': 'pve' }}\n                />\n              }\n              label=\"PvE\"\n            />\n            <FormControlLabel\n              control={\n                <Radio\n                  checked={serverType === 'pvp'}\n                  onClick={() => setServerType('pvp')}\n                  value=\"pvp\"\n                  name=\"radio-button-server-type\"\n                  inputProps={{ 'aria-label': 'pvp' }}\n                />\n              }\n              label=\"PvP\"\n            />\n          </ListItem>\n          <ListItem>\n            <FormControl style={{ width: 250 }}>\n              <InputLabel htmlFor=\"server-simple\">\n                Choose your Server language\n              </InputLabel>\n              <Select\n                value={serverLang}\n                onChange={(event: ChangeEvent<any>) =>\n                  setServerLang(event.target.value)\n                }\n              >\n                <MenuItem value=\"\" />\n                {['fr', 'en', 'de', 'ru'].map(lang => (\n                  <MenuItem key={lang} value={lang}>\n                    {lang}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </ListItem>\n        </List>\n      </DialogContent>\n      <DialogActions\n        disabled={!serverLang || !serverType || !serverName}\n        onClose={onClose}\n        onClick={() =>\n          openGithub(serverName!, '@server-infos.json', fileContent)\n        }\n      >\n        Make a request to add my server\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { ChangeEvent } from 'react';\n\nimport {\n  Radio,\n  TextField,\n  FormControlLabel,\n  FormLabel,\n  DialogContent,\n  List\n} from '@material-ui/core';\nimport { Dialog, DialogActions, DialogTitle, ListItem } from '../Dialog';\n\nimport { openGithub } from '../../utils/openGithub';\n\nimport guildRef from '../../utils/guildReference.json';\nimport { GithubInfos } from '../GithubInfos';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  serverName: string;\n}\n\nexport function ModalCreateGuild({ isOpen, onClose, serverName }: Props) {\n  const [guildName, setGuildName] = React.useState<string>();\n  const [guildFaction, setGuildFaction] = React.useState<string>();\n  const [guildGMName, setGuildGMName] = React.useState<string>();\n  const [guildDiscord, setGuildDiscord] = React.useState<string>('');\n  const [guildSite, setGuildSite] = React.useState<string>('');\n\n  const fileContent = {\n    infos: {\n      cleanName: guildName,\n      faction: guildFaction,\n      gm: guildGMName,\n      discord: guildDiscord,\n      site: guildSite\n    },\n    raids: {\n      ...guildRef.raids\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Add your guild</DialogTitle>\n      <DialogContent>\n        <GithubInfos />\n        <List>\n          <ListItem>\n            <TextField\n              label=\"Server\"\n              value={serverName}\n              disabled\n              margin=\"normal\"\n            />\n            <TextField\n              label=\"Guild name\"\n              value={guildName}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                setGuildName(event.target.value)\n              }\n              margin=\"normal\"\n            />\n            <TextField\n              label=\"GM name\"\n              value={guildGMName}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                setGuildGMName(event.target.value)\n              }\n              margin=\"normal\"\n            />\n          </ListItem>\n          <ListItem>\n            <div style={{ marginTop: 16, marginBottom: -15 }}>\n              <FormLabel component=\"legend\">Faction</FormLabel>\n              <FormControlLabel\n                control={\n                  <Radio\n                    checked={guildFaction === 'horde'}\n                    onClick={() => setGuildFaction('horde')}\n                    value=\"horde\"\n                    name=\"radio-button-server-type\"\n                    inputProps={{ 'aria-label': 'horde' }}\n                  />\n                }\n                label=\"Horde\"\n              />\n              <FormControlLabel\n                control={\n                  <Radio\n                    checked={guildFaction === 'alliance'}\n                    onClick={() => setGuildFaction('alliance')}\n                    value=\"alliance\"\n                    name=\"radio-button-server-type\"\n                    inputProps={{ 'aria-label': 'alliance' }}\n                  />\n                }\n                label=\"Alliance\"\n              />\n            </div>\n          </ListItem>\n          <ListItem>\n            <TextField\n              style={{ width: '100%' }}\n              label=\"Guild Discord\"\n              value={guildDiscord}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                setGuildDiscord(event.target.value)\n              }\n              margin=\"normal\"\n            />\n          </ListItem>\n          <ListItem>\n            <TextField\n              style={{ width: '100%' }}\n              label=\"Guild Website\"\n              value={guildSite}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                setGuildSite(event.target.value)\n              }\n              margin=\"normal\"\n            />\n          </ListItem>\n        </List>\n\n        <DialogActions\n          disabled={!guildName || !guildFaction || !guildGMName}\n          onClose={onClose}\n          onClick={() =>\n            openGithub(serverName!, guildName! + '.json', fileContent)\n          }\n        >\n          Make a request to add my guild\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { Dialog, DialogActions, DialogTitle } from '../Dialog';\nimport { DialogContent } from '@material-ui/core';\nimport { helpAddKillImage } from '../../utils/images';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ModalAddKillInfo({ isOpen, onClose }: Props) {\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Hey</DialogTitle>\n      <DialogContent>\n        <p> To update the kill of your guild, just click on any empty case: </p>\n        <p style={{ textAlign: 'center', paddingRight: 40 }}>\n          <img src={helpAddKillImage} alt=\"how to add boss kill\" />\n        </p>\n      </DialogContent>\n      <DialogActions onClick={onClose}>Ok</DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { Dialog, DialogActions, DialogTitle } from '../Dialog';\nimport { DialogContent } from '@material-ui/core';\nimport { helpImage } from '../../utils/images';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ModalHelp({ isOpen, onClose }: Props) {\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>Help with updates</DialogTitle>\n      <DialogContent>\n        <p>\n          This app rely on a github project. To update the informations you have\n          to make a proposal in this project.\n        </p>\n        <p>\n          The only (free) requirement is to have a{' '}\n          <a\n            style={{ color: 'black', fontWeight: 'bold' }}\n            href=\"https://github.com/\"\n            target=\"_href\"\n          >\n            GitHub account\n          </a>\n          . Then the formularies of the app automatically create or update the\n          right files for you.\n        </p>\n        <p>\n          Just think to scroll down and create a branch with your modifications\n          :\n        </p>\n        <div style={{ textAlign: 'center', padding: 25 }}>\n          <img src={helpImage} style={{ width: 800 }} alt=\"\" />\n        </div>\n        <p>\n          Then, on the next page, you have to create a new <b>pull request</b>.\n        </p>\n      </DialogContent>\n      <DialogActions onClick={onClose}>Ok</DialogActions>\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { ListItem, ListItemText } from '@material-ui/core';\nimport CONFIG from '../../config';\n\ninterface Props {\n  width: number;\n}\n\nexport function AppVersion({ width }: Props) {\n  return (\n    <ListItem\n      style={{\n        position: 'fixed',\n        bottom: 0,\n        color: '#c0c0c0',\n        textAlign: 'right',\n        width\n      }}\n    >\n      <ListItemText primary={CONFIG.appVersion} />\n    </ListItem>\n  );\n}\n","import React from 'react';\nimport {\n  Drawer,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  List,\n  Divider\n} from '@material-ui/core';\nimport {\n  MenuIcon,\n  AddGuild,\n  AddServer,\n  GridPlus,\n  HelpIcon,\n  CloseMenuIcon,\n  BugIcon,\n  CoinIcon\n  // BitcoinIcon\n} from './icons';\n\nimport { ModalCreateServer } from '../ModalCreateServer';\nimport { ModalCreateGuild } from '../ModalCreateGuild';\nimport { ModalAddKillInfo } from '../ModalAddKillInfo';\nimport { ModalHelp } from '../ModalHelp';\nimport { AppVersion } from '../AppVersion';\n\ninterface Props {\n  currentServer: string;\n}\n\nexport function Menu({ currentServer }: Props) {\n  const [isOpen, setOpen] = React.useState(false);\n  const [isModalInfoKillVisible, setModalInfoKillVisibility] = React.useState(\n    false\n  );\n\n  const [isModalHelpVisible, setModalHelpVisibility] = React.useState(false);\n  const [\n    isModalCreateServerVisible,\n    setModalCreateServerVisibility\n  ] = React.useState(false);\n\n  const [\n    isModalCreateGuildVisible,\n    setModalCreateGuildVisibility\n  ] = React.useState(false);\n\n  const listWidth = 265;\n\n  return (\n    <div style={{ display: 'inline-block' }}>\n      <div style={{ position: 'fixed', top: 5, left: 5 }}>\n        <MenuIcon onClick={() => setOpen(true)} />\n      </div>\n\n      <Drawer open={isOpen} onClose={() => setOpen(false)}>\n        <div\n          style={{ position: 'fixed', top: 5, left: 5, zIndex: 888888888888 }}\n        >\n          <CloseMenuIcon onClick={() => setOpen(false)} />\n        </div>\n        <List style={{ width: listWidth }}>\n          <h2 style={{ textAlign: 'center', marginTop: 55 }}>Update infos</h2>\n          <ListItem\n            button\n            onClick={() => {\n              setOpen(false);\n              setModalInfoKillVisibility(true);\n            }}\n          >\n            <ListItemIcon>\n              <GridPlus />\n            </ListItemIcon>\n            <ListItemText primary=\"Add a boss kill ?\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem\n            button\n            onClick={() => {\n              setOpen(false);\n              setModalCreateGuildVisibility(true);\n            }}\n          >\n            <ListItemIcon>\n              <AddGuild />\n            </ListItemIcon>\n            <ListItemText primary=\"Add your guild\" />\n          </ListItem>\n          <ListItem\n            button\n            onClick={() => {\n              setOpen(false);\n              setModalCreateServerVisibility(true);\n            }}\n          >\n            <ListItemIcon>\n              <AddServer />\n            </ListItemIcon>\n            <ListItemText primary=\"Add your Server\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem\n            button\n            onClick={() => {\n              setOpen(false);\n              setModalHelpVisibility(true);\n            }}\n          >\n            <ListItemIcon>\n              <HelpIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Help\" />\n          </ListItem>\n          <ListItem\n            button\n            onClick={() => {\n              setOpen(false);\n              window.open('https://www.paypal.me/devilhunter/2', '_blank');\n            }}\n          >\n            <ListItemIcon>\n              <CoinIcon />\n            </ListItemIcon>\n            {/* <ListItemIcon>\n              <BitcoinIcon />\n            </ListItemIcon> */}\n            <ListItemText primary=\"Thank me with a 🍺\" />\n          </ListItem>\n          <ListItem\n            button\n            onClick={() => {\n              setOpen(false);\n              window.open(\n                'https://github.com/DavidBabel/wow-classic-pve/issues/new/choose',\n                '_blank'\n              );\n            }}\n          >\n            <ListItemIcon>\n              <BugIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Report a bug\" />\n          </ListItem>\n          <AppVersion width={listWidth} />\n        </List>\n      </Drawer>\n      <ModalCreateServer\n        isOpen={isModalCreateServerVisible}\n        onClose={() => setModalCreateServerVisibility(false)}\n      />\n      <ModalCreateGuild\n        serverName={currentServer}\n        isOpen={isModalCreateGuildVisible}\n        onClose={() => setModalCreateGuildVisibility(false)}\n      />\n      <ModalAddKillInfo\n        isOpen={isModalInfoKillVisible}\n        onClose={() => setModalInfoKillVisibility(false)}\n      />\n      <ModalHelp\n        isOpen={isModalHelpVisible}\n        onClose={() => setModalHelpVisibility(false)}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport rawDB from '../generatedDatabase.json';\nimport { Database, Faction, RaidNames } from '../types/database.type';\nimport ServerSelect from './SelectServer/index';\nimport { Checkbox } from './Checkbox/index';\nimport { DisplayedRaids, DisplayedFactions } from '../types/states.type';\nimport { getBoolObjectAsArray } from '../utils/object';\nimport { cleanRaidTitles } from '../config/raidTitles';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Raids } from './Raids/index';\nimport { Menu } from './Menu';\nimport { capitalize } from '../utils/string';\n\nimport {\n  Drawer,\n  Button,\n  Checkbox as MaterialCheckbox,\n  FormControlLabel\n} from '@material-ui/core';\nimport { fkillHorde, fkillAlliance } from '../utils/images';\n\n// TODO a bit of responsive\n// TODO check scroll\n// TODO add raid icon to display\n// TODO : onclick for down, fill in gray the case you just click on\n// TODO : clear cached file debug button\n// TODO : make server select a searchable select\n// TODO : scroll bar on popup\n// TODO : put analytics & hotjar\n// TODO : fix react console warn / error\n// TODO : cleaner tooltip to display date of down\n// TODO ? retreive version this from package.json ?\n// TODO : do TODO\nconst typedDatabase = (rawDB as unknown) as Database;\nconst servers = Object.keys(typedDatabase);\n\ntype Props = RouteComponentProps<{ serverName?: string }>;\n\nexport default function App({ match, history }: Props) {\n  const serverName = (match && match.params && match.params.serverName) || '';\n  const [showRaidDrawer, setRaidDrawerVisibility] = useState(false);\n  const [currentServerName, setCurrentServerName] = useState(serverName);\n  const [showEmptyGuilds, setEmptyGuildsVisibility] = useState(true);\n  const [currentDisplayedFactions, setFactionDisplayed] = useState<\n    DisplayedFactions\n  >({\n    alliance: true,\n    horde: true\n  });\n  const [currentDisplayedRaids, setRaidDisplayed] = useState<DisplayedRaids>({\n    wb: true,\n    drakes: false,\n    mc: true,\n    ony: true,\n    bwl: false,\n    zg: false,\n    aq20: false,\n    aq40: false,\n    naxx: false\n  });\n\n  const currentServer = typedDatabase[currentServerName];\n\n  if (!servers.includes(serverName)) {\n    return (\n      <div>\n        Something went wrong, this server is not known. Please go to{' '}\n        <a href=\"https://github.com/DavidBabel/wow-classic-pve\">\n          https://github.com/DavidBabel/wow-classic-pve\n        </a>{' '}\n        and create it.\n      </div>\n    );\n  }\n\n  const guildsNames = Object.keys(currentServer.guilds).filter(guildName =>\n    getBoolObjectAsArray<Faction>(currentDisplayedFactions).includes(\n      currentServer.guilds[guildName].infos.faction\n    )\n  );\n\n  return (\n    <div style={{ marginLeft: 60, marginTop: 100, marginBottom: 150 }}>\n      <Menu currentServer={currentServerName} />\n      <div style={{ position: 'fixed', bottom: 8, left: 14 }}>\n        <FormControlLabel\n          style={{ color: 'grey' }}\n          control={\n            <MaterialCheckbox\n              checked={showEmptyGuilds}\n              onChange={() => setEmptyGuildsVisibility(!showEmptyGuilds)}\n              color=\"primary\"\n            />\n          }\n          label={'Show hidden guilds'}\n        />\n      </div>\n      <div style={{ position: 'fixed', right: 0, top: 0, display: 'flex' }}>\n        <div style={{ margin: 10, marginTop: 21, marginRight: 14 }}>\n          {(Object.keys(currentDisplayedFactions) as Faction[]).map(\n            (factionName: Faction) => (\n              <Checkbox\n                name={factionName}\n                label={\n                  <span style={{ display: 'flex', alignItems: 'center' }}>\n                    <img\n                      src={factionName === 'horde' ? fkillHorde : fkillAlliance}\n                      alt={factionName}\n                    />\n                    &nbsp;&nbsp;{capitalize(factionName)}\n                  </span>\n                }\n                isChecked={currentDisplayedFactions[factionName]}\n                onChange={newValue =>\n                  setFactionDisplayed({\n                    ...currentDisplayedFactions,\n                    ...newValue\n                  })\n                }\n              />\n            )\n          )}\n        </div>\n\n        <div style={{ margin: 10 }}>\n          <ServerSelect\n            onChange={(newServer: string) => {\n              setCurrentServerName(newServer);\n              history.push(`/${newServer}`);\n            }}\n            servers={servers}\n            selected={currentServerName}\n          />\n        </div>\n      </div>\n\n      <div>\n        <Raids\n          showEmptyGuilds={showEmptyGuilds}\n          currentServer={currentServer}\n          currentServerName={currentServerName}\n          displayedGuilds={guildsNames}\n          displayedRaids={getBoolObjectAsArray<RaidNames>(\n            currentDisplayedRaids\n          )}\n        />\n      </div>\n      <Drawer open={showRaidDrawer} anchor=\"bottom\" variant=\"persistent\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexWrap: 'wrap',\n            paddingLeft: 170,\n            paddingRight: 170\n          }}\n        >\n          {(Object.keys(currentDisplayedRaids) as RaidNames[]).map(\n            (raidName: RaidNames) => (\n              <div style={{ margin: 5, whiteSpace: 'nowrap' }}>\n                <Checkbox\n                  name={raidName}\n                  label={cleanRaidTitles[raidName]}\n                  isChecked={currentDisplayedRaids[raidName]}\n                  onChange={newValue => {\n                    const newState = {\n                      ...currentDisplayedRaids,\n                      ...newValue\n                    };\n                    setRaidDisplayed(newState);\n                    // history.push({ search: qs.stringify(newState) });\n                  }}\n                />\n              </div>\n            )\n          )}\n        </div>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => setRaidDrawerVisibility(false)}\n          style={{ position: 'fixed', bottom: 7, right: 7 }}\n        >\n          Hide raid filters\n        </Button>\n      </Drawer>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => setRaidDrawerVisibility(true)}\n        style={{ position: 'fixed', bottom: 7, right: 7 }}\n      >\n        Show raid filters\n      </Button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Route, Redirect } from 'react-router-dom';\nimport CONFIG from './config';\n\n// Router fix : https://github.com/facebook/create-react-app/issues/1765\n\nReactDOM.render(\n  <HashRouter basename={CONFIG.appPath}>\n    <Route path=\"/:serverName\" exact component={App} />\n    <Route hash=\"/\" exact component={() => <Redirect to=\"/Sulfuron\" />} />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export function capitalize(s: string) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Raids\":\"styles_Raids__17G9c\",\"raidBlock\":\"styles_raidBlock__RIyyK\",\"bossLine\":\"styles_bossLine__2XehB\",\"bossName\":\"styles_bossName__jNi8_\",\"guildNames\":\"styles_guildNames__1994R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Case\":\"styles_Case__3TbbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formListItem\":\"styles_formListItem__1eWG3\"};"],"sourceRoot":""}